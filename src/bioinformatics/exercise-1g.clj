(ns bioinformatics.exercises
  (:require [clojure.math.combinatorics :as combo]
            [clojure.core.reducers :as r]))

(use 'clojure.pprint)
(use 'criterium.core)

(defn gen-seq [w replacements]
  (reduce (fn [s [i c]] (assoc s i c)) w replacements))

(defn mutations [s k d]
  (let [cbs (combo/combinations (range k) d)
        sls (combo/selections s d)
        rps (->> (combo/cartesian-product cbs sls)
                 (map #(apply map vector %)))]
    (fn [w]
      (let [w  (vec w)
            xf (comp (map #(gen-seq w %)) (dedupe))]
        (sequence xf rps)))))

(defn freq-words-with-mismatches [text k d]
  (let [mutate-f  (mutations #{\A \C \G \T} k d)
        word-freq (->> (partition k 1 text)
                       frequencies
                       (into []))]
    (->> (r/fold 128
                 (fn ([] {})
                   ([a b] (merge-with + a b)))
                 (fn [s [w v]]
                   (merge-with + s (zipmap (mutate-f w) (repeat v))))
                 word-freq)
         (group-by val)
         (apply max-key key)
         val
         (map key))))

(comment
  ;; single thread version
  (defn freq-words-with-mismatches [text k d]
    (let [mutate-f  (mutations #{\A\C\G\T} k d)
          word-freq (->> (partition k 1 text)
                         frequencies
                         (into []))]
      (->> word-freq
           (map (fn [[w v]] (zipmap (mutate-f w) (repeat v))))
           (apply merge-with +)
           (group-by val)
           (apply max-key key)
           val
           (map key)))))

;;;;;

(let [w1 "CACAGTAGGCGCCGGCACACACAGCCCCGGGCCCCGGGCCGCCCCGGGCCGGCGGCCGCCGGCGCCGGCACACCGGCACAGCCGTACCGGCACAGTAGTACCGGCCGGCCGGCACACCGGCACACCGGGTACACACCGGGGCGCACACACAGGCGGGCGCCGGGCCCCGGGCCGTACCGGGCCGCCGGCGGCCCACAGGCGCCGGCACAGTACCGGCACACACAGTAGCCCACACACAGGCGGGCGGTAGCCGGCGCACACACACACAGTAGGCGCACAGCCGCCCACACACACCGGCCGGCCGGCACAGGCGGGCGGGCGCACACACACCGGCACAGTAGTAGGCGGCCGGCGCACAGCC"
      ]
  (->> (time (freq-words-with-mismatches w1 10 2))
       (cl-format *out* "~{~{~a~}~%~}")))

(let [w1 "ACGTTGCATGTCGCATGATGCATGAGAGCT"]
  (->> (time (freq-words-with-mismatches w1 3 1))
       (cl-format *out* "~{~{~a~}~%~}")))

(let [w1 "TTTTTCAAGCAGGATGAGCAGGATGAATATCTCTCGTTCACCTGCGTTCACCTGTTTTTCAAGCAGGATGACGTTCACCTGCAGAAGCATTTTTCAAGCAGGATGATTTTTCAAATATCTCTTTTTTCAAGCAGGATGACAGAAGCACAGAAGCACGTTCACCTGCAGAAGCATTTTTCAAATATCTCTCAGAAGCATTTTTCAACGTTCACCTGCAGAAGCACGTTCACCTGGCAGGATGACGTTCACCTGATATCTCTTTTTTCAACAGAAGCAGCAGGATGAGCAGGATGACAGAAGCAATATCTCTATATCTCTCGTTCACCTGATATCTCTATATCTCTCAGAAGCATTTTTCAATTTTTCAACGTTCACCTGTTTTTCAAGCAGGATGAATATCTCTTTTTTCAATTTTTCAATTTTTCAACGTTCACCTGATATCTCTGCAGGATGAATATCTCTATATCTCTCGTTCACCTGTTTTTCAACAGAAGCAATATCTCTGCAGGATGAATATCTCTCAGAAGCAGCAGGATGATTTTTCAACAGAAGCAGCAGGATGACAGAAGCAATATCTCTTTTTTCAAATATCTCTCGTTCACCTGCAGAAGCACGTTCACCTGCAGAAGCATTTTTCAAGCAGGATGATTTTTCAAGCAGGATGATTTTTCAAGCAGGATGACAGAAGCAGCAGGATGAGCAGGATGATTTTTCAACGTTCACCTGATATCTCTATATCTCTGCAGGATGAATATCTCTATATCTCTTTTTTCAACAGAAGCAGCAGGATGACGTTCACCTGCGTTCACCTGATATCTCTCGTTCACCTGCGTTCACCTGCGTTCACCTGCAGAAGCACGTTCACCTGGCAGGATGAATATCTCTGCAGGATGACAGAAGCA"
      ]
  (bench (freq-words-with-mismatches w1 12 2)))

(let [w1 "AAAACGAAAGTATTCATGTATTCATTATATTCCTGTATTCATGTATTCATGTATTCATAAAACGAAAAAAACGAAAAAAACGAAAGGGTGCTCGTATTCATAAAACGAAAGGGTGCTCGTATTCATGTATTCATGGCCATAGGGGTGCTCAAAACGAAAGGCCATAGGGCCATAGGGGTGCTCTATATTCCTGTATTCATGGGTGCTCGTATTCATAAAACGAAATATATTCCTGGCCATAGGTATTCATAAAACGAAATATATTCCTTATATTCCTGGGTGCTCAAAACGAAATATATTCCTGTATTCATGGGTGCTCTATATTCCTAAAACGAAATATATTCCTGTATTCATGGGTGCTCTATATTCCTGTATTCATGGCCATAGGTATTCATGTATTCATTATATTCCTGTATTCATGGGTGCTCAAAACGAAAAAAACGAAAGGCCATAGTATATTCCTGTATTCATGTATTCATGGGTGCTCAAAACGAAAAAAACGAAAAAAACGAAAGGGTGCTCGGCCATAGGTATTCATTATATTCCTGTATTCATTATATTCCTGGCCATAGGTATTCATGTATTCATTATATTCCTGTATTCATGGCCATAGAAAACGAAAGTATTCATGGGTGCTCAAAACGAAAAAAACGAAATATATTCCTGTATTCATGGGTGCTCAAAACGAAAAAAACGAAATATATTCCTGGGTGCTCGTATTCATTATATTCCTGTATTCATTATATTCCTGTATTCATGTATTCATAAAACGAAAGGCCATAGGTATTCATAAAACGAAAAAAACGAAAGGGTGCTCGGGTGCTCGTATTCAT"
      ]
  (->> (time (freq-words-with-mismatches w1 10 2))
       (cl-format *out* "~{~{~a~}~%~}")))
